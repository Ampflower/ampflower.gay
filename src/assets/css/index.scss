---
---

$mobile_width: 460px;

// TODO: maybe move some of the stuff out of here, like `.card` -- Moxie

@import "brand";

body {
	margin: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: flex-start;
	min-height: 100vh;
	min-height: 100dvh;
	font-size: 12pt;
	z-index: -3;
	overflow-x: hidden;

	@media screen and (min-width: 260px) {
		align-items: center;
	}

	@media screen and (prefers-color-scheme: dark) {
		background-color: #181720;
		color: white;

		a {
			color: #7AF;
			&:visited {
				color: #FAF;
			}
		}
	}
}

@mixin card-detached-box-shadow ($border-width: 0px) {
	position: relative;

	&::before {
		content: "";
		display: block;
		position: absolute;
		box-sizing: border-box;
		inset: calc($border-width * -1);
		background: transparent;
		z-index: -2;
		border-radius: inherit;
		border: $border-width solid transparent;
		@content;
	}
}

// Colours derived from:
//  - Cloth: e0a1e1
//  - Border: 98c46e
.card {
	font-family: 'Arial', 'sans-serif';
	background-color: #d6b8ff;
	padding: 0.5em;
	border: 3px solid #98c46e;
	border-radius: 1em;
	width: 27em;
	max-width: 95vw;
	box-sizing: border-box;

	// A small hack to have the box-shadow be on a different z-index,
	// allowing me to put stuff behind the `.card` but before the box-shadow.
	@include card-detached-box-shadow(3px) {
		box-shadow: 0em 1em 3em -1em black;
	}

	@media screen and (prefers-color-scheme: dark) {
		background-color: #2f2442;
		border: 3px solid #32471f;
	}
}

.card > header {
	display: grid;
	grid-template-columns: 100%;
	grid-template-rows: max-content 1fr 1fr;
	grid-template-areas:
		"icon"
		"title"
		"subtitle";
	margin-bottom: 1em;

	@media screen and (min-width: $mobile_width) {
		grid-template-columns: max-content 1fr;
		grid-template-rows: 1fr 1fr;
		grid-template-areas:
			"icon title"
			"icon subtitle";
		gap: 1em;
	}

	> img {
		grid-area: icon;
		margin-left: auto;
		margin-right: auto;
	}

	> .title, > .subtitle {
		text-align: center;
		display: flex;
		flex-direction: column;
		@media screen and (min-width: $mobile_width) {
			text-align: left;
		}
	}

	> .title {
		grid-area: title;
		justify-content: flex-end;

		> h1 {
			margin-block: 0;
		}
	}

	> .subtitle {
		grid-area: subtitle;
		font-style: italic;
		justify-content: center;

		> p {
			margin-block: 0;
		}
	}

	main {
		margin: 0.25em 0.25em;
	}
}

nav.links > ul {
	list-style: none;
	padding-left: 0;
	display: flex;
	flex-flow: wrap;
	flex-direction: row;
	justify-content: center;
	gap: 1em;

	flex-flow: wrap;
	margin: 1em 0pt;

	a {
		display: flex;
		margin: 2pt;
		padding: 0.5em;
		align-items: center;
		border-radius: 8pt;
		outline: 2px solid transparent;
		box-shadow: 0 0.25em 0.5em -0.25em rgba(0, 0, 0, 0.15);
		text-decoration: none;
		transition: outline-color 0.2s;

		span {
			margin: 2pt;
		}

		&:hover, &:focus {
			span:not([aria-labelledby]) {
				text-decoration: underline;
			}

			// transform: translateY(-1pt);
			outline: 2px solid black;
			animation-name: trans-background;

			// Normally you'd put these in a stateless element,
			// but CSS doesn't do *anything special* for transforming back.
			// So, yes, unfortunately, this jumps back regardless.
			animation-duration: 2.5s;
			animation-direction: alternate;
			animation-timing-function: ease-in-out;
			animation-iteration-count: infinite;

			@media screen and (prefers-color-scheme: dark) {
				animation-name: trans-outline;
			}
		}

		@media screen and (min-width: $mobile_width) {
			padding: 2pt;
		}
	}

	.omit {
		display: none;

		@media screen and (min-width: $mobile_width) {
			display: inline-block;
		}
	}

	img {
		border-radius: 16pt;
	}

	img, svg {
		max-width: 24px;
	}

	@media screen and (min-width: $mobile_width) {
		gap: 0;
	}
}


.center {
	text-align: center;
}

.content {
	margin-left: 8pt;
}

// make text transparent, background clip, background linear gradient with hard stops
a.trans {
	// Makes the transform and colour blending seamless where applicable.
	// Unfortunately 'background-color' is not sufficient to fix an animation.
	transition: transform 0.2s ease,
				color 0.2s ease,
				background-color 0.2s ease;

	@supports (background-clip: text) {
		&:hover {
			color: transparent;
			background-clip: text;
			background-image: linear-gradient(
				to right,
				skyblue, pink, white, pink, skyblue
			);
		}
	}
}


@keyframes trans-outline {
	// from intentionally omitted
	15% {
		outline-color: skyblue;
	}
	65% {
		outline-color: pink;
	}
	to {
		outline-color: white;
	}
}

@keyframes trans-background {
	// from intentionally omitted
	15% {
		background-color: skyblue;
	}
	65% {
		background-color: pink;
	}
	to {
		background-color: white;
	}
}

#hibiscus-decorations {
	img {
		position: absolute;
		z-index: -1;
		--rotation: 0;
		--delay: 0s;
		--duration: 2s;
		transform: rotate(calc(var(--rotation) * 90deg));
		animation: var(--duration) ease-in-out infinite var(--delay) alternate hibiscus;

		display: none;

		@media screen {
			&.hibiscus-top, &.hibiscus-bottom {
				display: block;
			}
		}

		@media screen and (min-width: $mobile_width) {
			&.hibiscus-left, &.hibiscus-right {
				display: block;
			}
		}
	}
}

@keyframes hibiscus {
	0% {
		transform: rotate(calc(var(--rotation) * 90deg - 45deg));
	}

	100% {
		transform: rotate(calc(var(--rotation) * 90deg + 45deg));
	}
}
